# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Load dataset
data = pd.read_csv('Social_Network_Ads.csv')

# View the first few rows
print(data.head())

# Select features and target
X = data[['Age', 'EstimatedSalary']]  # Independent variables
y = data['Purchased']                # Target variable (binary)

# Split into training and testing datasets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Create and train logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict the test set results
y_pred = model.predict(X_test)

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
TP = cm[1, 1]
TN = cm[0, 0]
FP = cm[0, 1]
FN = cm[1, 0]

# Compute metrics
accuracy = accuracy_score(y_test, y_pred)
error_rate = 1 - accuracy
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

# Print results
print("Confusion Matrix:")
print(cm)
print(f"\nTrue Positives (TP): {TP}")
print(f"True Negatives (TN): {TN}")
print(f"False Positives (FP): {FP}")
print(f"False Negatives (FN): {FN}")
print(f"\nAccuracy: {accuracy:.2f}")
print(f"Error Rate: {error_rate:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")

'''
Theory Explanation:

What the program does:
This program performs binary classification using logistic regression on a dataset (`Social_Network_Ads.csv`) to predict whether a user purchased a product based on their age and estimated salary.

Key operations of the program:
1. **Data Loading and Preparation**: The dataset is read using pandas, and only two features (`Age`, `EstimatedSalary`) are selected along with the binary target variable (`Purchased`).
2. **Train-Test Split**: The dataset is split into training (75%) and testing (25%) sets to evaluate model generalization.
3. **Model Training**: A logistic regression model is created and trained using the training dataset.
4. **Prediction**: The model makes predictions on the test dataset.
5. **Confusion Matrix Construction**: The confusion matrix is used to determine the number of true positives, true negatives, false positives, and false negatives.
6. **Performance Metrics**:
   - **Accuracy**: Measures overall correctness of the model.
   - **Error Rate**: The proportion of incorrect predictions.
   - **Precision**: The ratio of true positives to all positive predictions.
   - **Recall**: The ratio of true positives to all actual positives.

Observations/Conclusions:
- Logistic regression is suitable for binary classification problems and provides interpretable results.
- The confusion matrix provides insight into how the model is performing with respect to both classes.
- High accuracy may be misleading in imbalanced datasets, hence precision and recall are crucial to evaluate.
- This model helps businesses predict user behavior based on demographic features, useful for targeted marketing or sales strategies.

'''
