import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocess
x_train = x_train.reshape(-1, 28, 28, 1).astype('float32') / 255.0
x_test = x_test.reshape(-1, 28, 28, 1).astype('float32') / 255.0
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Build CNN model
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile and train
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.1)

# Evaluate
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Test Accuracy:", test_acc)

"""
Theory Explanation:

What the program does:
This program builds and trains a Convolutional Neural Network (CNN) to classify handwritten digits (0â€“9) using the MNIST dataset. It processes the images, trains the model using supervised learning, and evaluates its performance on unseen test data.

What data structures are used and why:
- NumPy arrays: Used to store image and label data efficiently.
- TensorFlow Sequential model: A linear stack of layers ideal for defining a CNN in an intuitive and readable way.
- One-hot encoded vectors: Labels are converted to one-hot encoding using `to_categorical` to be compatible with the `categorical_crossentropy` loss function.

The key operations of the program:
1. **Data loading and preprocessing**:
   - Loads MNIST image and label data.
   - Reshapes image arrays to include a channel dimension and normalizes pixel values.
   - Converts integer labels to one-hot encoded format.

2. **Model building**:
   - Two convolutional layers extract features from images.
   - Two max-pooling layers reduce spatial dimensions.
   - A flatten layer converts the 2D data into a 1D vector.
   - Dense layers (including softmax) handle classification into 10 categories.

3. **Training and evaluation**:
   - The model is compiled with the Adam optimizer and categorical cross-entropy loss.
   - Trained over 5 epochs with a batch size of 64, using 10% of the training data for validation.
   - Final accuracy is evaluated on the test dataset.

Potential real-life use cases:
- Handwriting recognition in postal services or banking (cheque reading).
- Digit recognition in OCR (Optical Character Recognition) systems.
- Pattern recognition in robotics or AI-assisted grading systems.

A sample input/output scenario with an explanation:
- Input: A 28x28 grayscale image of the digit '5' (in pixel values scaled between 0 and 1).
- The CNN extracts features through convolution and pooling, then classifies the image.
- Output: A 10-element array from the softmax layer representing probabilities. E.g.,
  `[0.01, 0.00, 0.00, 0.00, 0.03, 0.95, 0.00, 0.00, 0.00, 0.01]`
- Interpretation: The model predicts the digit as '5' with 95% confidence.

"""
